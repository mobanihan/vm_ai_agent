[build-system]
requires = ["setuptools>=45", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[project]
name = "ai-infra-vm-agent"
version = "1.0.0"
description = "Production-ready VM agent for AI infrastructure management with MCP protocol support"
readme = "README.md"
license = "MIT"
authors = [
    {name = "AI Infra Team", email = "contact@ai-infra.com"},
]
maintainers = [
    {name = "AI Infra Team", email = "contact@ai-infra.com"},
]
keywords = ["vm", "agent", "infrastructure", "management", "mcp", "protocol", "automation"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: System :: Systems Administration",
    "Topic :: System :: Monitoring",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "aiohttp>=3.8.0",
    "aiohttp-cors>=0.7.0",
    "pyyaml>=6.0",
    "cryptography>=3.4.8",
    "psutil>=5.8.0",
    "websockets>=10.0",
    "asyncio-mqtt>=0.11.0",
    "pyjwt>=2.4.0",
    "paramiko>=2.11.0",
    "mcp>=1.0.0",
    "click>=8.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "mypy>=1.0.0",
    "pre-commit>=2.20.0",
]
monitoring = [
    "prometheus-client>=0.14.0",
    "grafana-api>=1.0.3",
]

[project.urls]
Homepage = "https://github.com/ai-infra/vm-agent"
Documentation = "https://docs.ai-infra.com/vm-agent"
Repository = "https://github.com/ai-infra/vm-agent.git"
"Bug Tracker" = "https://github.com/ai-infra/vm-agent/issues"

[project.scripts]
vm-agent = "vm_agent.cli:main"
vm-agent-server = "vm_agent.server:main"
vm-agent-install = "vm_agent.installer:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["vm_agent*"]

[tool.setuptools.package-data]
vm_agent = [
    "config/*.yaml",
    "systemd/*.service",
    "scripts/*.sh",
    "templates/*.j2",
]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["vm_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
] 